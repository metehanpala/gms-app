import { WindowHandler } from "./window-handler";
import { CaptureWindowInfo, CaptureWindowRequestInfo } from '../messaging/window-message.data';

export class WindowCapture {
  constructor(private windowHandler: WindowHandler) { }

  public captureWindows(senderBrowserWindowId: number, requestInfo: CaptureWindowRequestInfo): Promise<CaptureWindowInfo[]> {
    const p = new Promise<CaptureWindowInfo[]>((resolve) => {

      const winInfos = this.windowHandler.getWindowsInfo(
        senderBrowserWindowId, { includeOwnWindow: requestInfo.includeOwnWindow, includeDetachedEvent: requestInfo.includeDetachedEvent});
      const cwInfos: CaptureWindowInfo[] = [];
      winInfos.forEach(winInfo => {
        const cwInfo: CaptureWindowInfo = {
          windowInfo: winInfo,
          sourceId: this.windowHandler.getBrowserManagerWindow(winInfo.browserWindowId)!.getMediaSourceId()
        };
        cwInfos.push(cwInfo);
      });
      resolve(cwInfos);

      // const wins: BrowserWindow[] = [];
      // if (requestInfo.includeOwnWindow || (this.windowHandler.mainMangerWindow!.id !== senderBrowserWindowId)) {
      //   wins.push(this.windowHandler.mainMangerWindow!);
      // }
      // this.windowHandler.additionalManagerWindows.forEach(win => {
      //   if (requestInfo.includeOwnWindow || (win.id !== senderBrowserWindowId)) {
      //     if ((requestInfo.includeDetachedEvent) || (this.windowHandler.getWindowForDetachedEvents()?.id !== win.id)) {
      //       wins.push(win);
      //     }
      //   }
      // });
      // const cwInfos: CaptureWindowInfo[] = [];
      // wins.forEach(win => {
      //   const cwInfo: CaptureWindowInfo = {
      //     windowInfo: {
      //       browserWindowId: win.id,
      //       managerWindowId: this.windowHandler.getWindowConfigurationId(win.id)!,
      //       webContentsId: win.webContents.id,
      //       title: this.windowHandler.getHtmlTitle(win.id)
      //     },
      //     sourceId: win.getMediaSourceId()
      //   };
      //   cwInfos.push(cwInfo);
      // });
      // resolve(cwInfos);

      // Due to a regression introduced with electron version 18, the commented code below does not work anymore.
      // desktopCapturer.getSources(...) does not return Flex CLient windows!!!.
      // The previous code is a simple workaround. This workaround is okay, as long as we do not use thumbnails nor app-icons as these are
      // generated by the capturer.
      // See issue: [Bug]: desktopCapturer.getSources does not get Electron #29931: https://github.com/electron/electron/issues/29931

      // let thumbnailSize: Size = { width: 0, height: 0 }; // no thumbnail
      // if (requestInfo.includeThumbnail) {
      //   thumbnailSize = { width: 200, height: 200 };
      // }
      // desktopCapturer.getSources({ types: ['window'], thumbnailSize: thumbnailSize }).then(sources => {
      //   const cwInfos: CaptureWindowInfo[] = [];
      //   const wins: BrowserWindow[] = [];
      //   if (requestInfo.includeOwnWindow || (this.windowHandler.mainMangerWindow!.id !== senderBrowserWindowId)) {
      //     wins.push(this.windowHandler.mainMangerWindow!);
      //   }
      //   this.windowHandler.additionalManagerWindows.forEach(win => {
      //     if (requestInfo.includeOwnWindow || (win.id !== senderBrowserWindowId)) {
      //       wins.push(win);
      //     }
      //   });
      //   for (const source of sources) {
      //     const idHwnd = source.id.split(':')[1];
      //     const browserWin = wins.find(win => (idHwnd == win.getNativeWindowHandle().readBigUInt64LE().toString()));
      //     if (browserWin !== undefined) {
      //       const cwInfo: CaptureWindowInfo = {
      //         windowInfo: {
      //           browserWindowId: browserWin.id,
      //           webContentsId: browserWin.webContents.id
      //         },
      //         sourceId: source.id,
      //         thumbNailDataUrl: source.thumbnail.toDataURL()
      //       };
      //       cwInfos.push(cwInfo);
      //     }
      //   }
      //   resolve(cwInfos);
      // })

    });
    return p;
  }
}
